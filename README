To compile,
$ javac BarCodes.java

To run with custom input,
$ java BarCodes <args>

To run with automatically generated test cases,
$ python CodeMaker.py [-h] [-r RANDNUM] [-c CODE [CODE ...]] [-f FILE] [-v]

optional arguments:
  -h, --help            show this help message and exit
  -r RANDNUM, --randNum RANDNUM
                        if you want randomly generated cases, specify the
                        number of cases.
  -c CODE [CODE ...], --code CODE [CODE ...]
                        specify specific codes you'd like to test. If random
                        cases are also generated, these will be the first
                        cases.
  -f FILE, --file FILE  Optionally print output to this file.
  -v, --verbose         print the values to command line


A testing strategy:
$ python CodeMaker.py [OTHER ARGS] --testFile expectedOutputs > actualOutputs
$ diff expectedOutputs actualOutputs

EXAMPLE 1 (simple): This example generates and runs one randomly generated example,
with the default maximum length of 20 characters.  No file output, and the
barcode output is displayed in stdout.

$ python CodeMader.py

EXAMPLE 2 (complex):  This example generates the test cases 123, ---, and
123-45, followed by 200 randomly generated examples with a max string
length of 50. The output that is processed by the Java code is written to
the file 'outputs', the expected output is written to 'expectedOutputs',
and the output of the Java code is piped to 'actualOutputs'.

$ python CodeMaker.py --code 123 --- 123-45 --numRand 200 --maxLength 50 --file outputs --testFile expectedOutputs > actualOutputs 

Equivalent syntax:

python CodeMaker.py -c 123 --- 123-45 -r 200 -m 50 -f outputs -t expectedOutputs > actualOutputs 

Ideally after running the above command,
$ diff expectedOutputs actualOutputs

should produce no output.