To compile,
$ javac BarCodes.java

To run with custom input,
$ java BarCodes <args>

To run with automatically generated test cases,
$ python CodeMaker.py [-h] [-r NUMRAND] [-c CODE [CODE ...]] [-m MAXLENGTH]
                    [-f FILE] [-t TESTFILE] [-v]

optional arguments:
  -h, --help            show this help message and exit
  -r NUMRAND, --numRand NUMRAND
                        if you want randomly generated cases, specify the
                        number of cases.
  -c CODE [CODE ...], --code CODE [CODE ...]
                        specific codes you would like to test. If random cases
                        are also generated, these will be the first cases.
  -m MAXLENGTH, --maxLength MAXLENGTH
                        maximum length of the test strings. default is 20.
  -f FILE, --file FILE  optionally print output to the specified file.
  -t TESTFILE, --testFile TESTFILE
                        optionally print the expected java output to a the
                        specified file
  -v, --verbose         print the values to command line


A testing strategy:
$ python CodeMaker.py [OTHER ARGS] --testFile expectedOutputs > actualOutputs
$ diff expectedOutputs actualOutputs

EXAMPLE 1 (simple): This example generates and runs one randomly generated
example, with the default maximum length of 20 characters.  No file output,
and the barcode output is displayed in stdout.

$ python CodeMader.py

EXAMPLE 2 (complex):  This example generates the test cases 123, ---, and
123-45, followed by 200 randomly generated examples with a max string
length of 50. The output that is processed by the Java code is written to
the file 'outputs', the expected output is written to 'expectedOutputs',
and the output of the Java code is piped to 'actualOutputs'.

$ python CodeMaker.py --code 123 --- 123-45 --numRand 200 --maxLength 50 --file outputs --testFile expectedOutputs > actualOutputs 

Equivalent syntax:

python CodeMaker.py -c 123 --- 123-45 -r 200 -m 50 -f outputs -t expectedOutputs > actualOutputs 

Ideally after running the above command,
$ diff expectedOutputs actualOutputs

should produce no output.

*****ALL BAD INPUT CASES THIS CODE SHOULD CATCH*****
1) input argument length is less than 30
   (1 for num inputs, 10 for start/stop, 10 for C/K, 5 for min 1 encoded char, >=4 separating bars)

2) 'number of inputs' argument of any case is 29 (above - num inputs arg)

3) last input case has less regions than its first integer argument
   (with only space delimiters, this can only be checked for last input,
    since the starting int of the next case cannot be differentiated from
    a bar encoding of the current case)

4) all inputs are the same value (no gaps between any values)

5) any values outside of range [1, 200]

6) if no number within the lower range satisfies:
    1) 5% in either direction is still inside the lower range, and
    2) 5% in either direction of 2X that value is still inside the
       upper range

7) first input bar is wide (regardless of reversed ordering)

8) input does not start and end with start/stop character

9) illegal character endocing (no character found for any 5 byte string)

10) separating bar is wide (could mean it's there and wide, or missing, and
   the first bar of the next character is wide.  we don't stick around to
   find the truth.  just bail!)

11) separating bar is missing (like above, but even if first bar of next
    encoded character is narrow, the looping will get screwed up, and this
    will be caught.)

